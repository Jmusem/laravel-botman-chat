{"ast":null,"code":"var _jsxFileName = \"C:\\\\laravel-botman-chat\\\\src\\\\ChatBotPage.js\",\n  _s = $RefreshSig$();\n// src/Chatbot.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: 'bot',\n    text: 'Hi! I am your support bot. How can I help you?'\n  }]);\n  const [input, setInput] = useState('');\n  const sendMessage = async () => {\n    if (input.trim() === '') return;\n\n    // Display user message\n    const userMessage = {\n      type: 'user',\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n    try {\n      var _response$data$answer, _response$data$answer2;\n      const response = await axios.post('http://127.0.0.1:8000/botman', {\n        driver: 'web',\n        userId: '123456',\n        message: input\n      });\n      const botResponse = {\n        type: 'bot',\n        text: ((_response$data$answer = response.data.answers) === null || _response$data$answer === void 0 ? void 0 : (_response$data$answer2 = _response$data$answer[0]) === null || _response$data$answer2 === void 0 ? void 0 : _response$data$answer2.message) || 'No response'\n      };\n      setMessages(prev => [...prev, botResponse]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        type: 'bot',\n        text: 'Error connecting to server.'\n      }]);\n    }\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatbox,\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: msg.type === 'user' ? styles.user : styles.bot,\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.inputArea,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        style: styles.button,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"DaLuWb5aYrkzn5viUKWdJWQUKqw=\");\n_c = Chatbot;\nconst styles = {\n  container: {\n    padding: '20px',\n    fontFamily: 'Arial'\n  },\n  chatbox: {\n    border: '1px solid #ccc',\n    padding: '10px',\n    height: '300px',\n    overflowY: 'scroll',\n    marginBottom: '10px'\n  },\n  user: {\n    textAlign: 'right',\n    margin: '5px',\n    background: '#DCF8C6',\n    padding: '5px',\n    borderRadius: '5px'\n  },\n  bot: {\n    textAlign: 'left',\n    margin: '5px',\n    background: '#F1F0F0',\n    padding: '5px',\n    borderRadius: '5px'\n  },\n  inputArea: {\n    display: 'flex'\n  },\n  input: {\n    flex: 1,\n    padding: '10px'\n  },\n  button: {\n    padding: '10px 20px'\n  }\n};\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","type","text","input","setInput","sendMessage","trim","userMessage","_response$data$answer","_response$data$answer2","response","post","driver","userId","message","botResponse","data","answers","prev","error","style","styles","container","children","chatbox","map","msg","i","user","bot","fileName","_jsxFileName","lineNumber","columnNumber","inputArea","value","onChange","e","target","placeholder","onClick","button","_c","padding","fontFamily","border","height","overflowY","marginBottom","textAlign","margin","background","borderRadius","display","flex","$RefreshReg$"],"sources":["C:/laravel-botman-chat/src/ChatBotPage.js"],"sourcesContent":["// src/Chatbot.js\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([\r\n    { type: 'bot', text: 'Hi! I am your support bot. How can I help you?' }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n\r\n  const sendMessage = async () => {\r\n    if (input.trim() === '') return;\r\n\r\n    // Display user message\r\n    const userMessage = { type: 'user', text: input };\r\n    setMessages([...messages, userMessage]);\r\n\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/botman', {\r\n        driver: 'web',\r\n        userId: '123456',\r\n        message: input,\r\n      });\r\n\r\n      const botResponse = {\r\n        type: 'bot',\r\n        text: response.data.answers?.[0]?.message || 'No response',\r\n      };\r\n\r\n      setMessages(prev => [...prev, botResponse]);\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, { type: 'bot', text: 'Error connecting to server.' }]);\r\n    }\r\n\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.chatbox}>\r\n        {messages.map((msg, i) => (\r\n          <div key={i} style={msg.type === 'user' ? styles.user : styles.bot}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div style={styles.inputArea}>\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={e => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          style={styles.input}\r\n        />\r\n        <button onClick={sendMessage} style={styles.button}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  container: { padding: '20px', fontFamily: 'Arial' },\r\n  chatbox: {\r\n    border: '1px solid #ccc',\r\n    padding: '10px',\r\n    height: '300px',\r\n    overflowY: 'scroll',\r\n    marginBottom: '10px',\r\n  },\r\n  user: { textAlign: 'right', margin: '5px', background: '#DCF8C6', padding: '5px', borderRadius: '5px' },\r\n  bot: { textAlign: 'left', margin: '5px', background: '#F1F0F0', padding: '5px', borderRadius: '5px' },\r\n  inputArea: { display: 'flex' },\r\n  input: { flex: 1, padding: '10px' },\r\n  button: { padding: '10px 20px' },\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CACvC;IAAEQ,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAiD,CAAC,CACxE,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIF,KAAK,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;IAEzB;IACA,MAAMC,WAAW,GAAG;MAAEN,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEC;IAAM,CAAC;IACjDH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEQ,WAAW,CAAC,CAAC;IAEvC,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,8BAA8B,EAAE;QAChEC,MAAM,EAAE,KAAK;QACbC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAEX;MACX,CAAC,CAAC;MAEF,MAAMY,WAAW,GAAG;QAClBd,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE,EAAAM,qBAAA,GAAAE,QAAQ,CAACM,IAAI,CAACC,OAAO,cAAAT,qBAAA,wBAAAC,sBAAA,GAArBD,qBAAA,CAAwB,CAAC,CAAC,cAAAC,sBAAA,uBAA1BA,sBAAA,CAA4BK,OAAO,KAAI;MAC/C,CAAC;MAEDd,WAAW,CAACkB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,WAAW,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdnB,WAAW,CAACkB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEjB,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAE;MAA8B,CAAC,CAAC,CAAC;IACtF;IAEAE,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACER,OAAA;IAAKwB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,gBAC3B3B,OAAA;MAAKwB,KAAK,EAAEC,MAAM,CAACG,OAAQ;MAAAD,QAAA,EACxBxB,QAAQ,CAAC0B,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,kBACnB/B,OAAA;QAAawB,KAAK,EAAEM,GAAG,CAACzB,IAAI,KAAK,MAAM,GAAGoB,MAAM,CAACO,IAAI,GAAGP,MAAM,CAACQ,GAAI;QAAAN,QAAA,EAChEG,GAAG,CAACxB;MAAI,GADDyB,CAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEN,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNrC,OAAA;MAAKwB,KAAK,EAAEC,MAAM,CAACa,SAAU;MAAAX,QAAA,gBAC3B3B,OAAA;QACEK,IAAI,EAAC,MAAM;QACXkC,KAAK,EAAEhC,KAAM;QACbiC,QAAQ,EAAEC,CAAC,IAAIjC,QAAQ,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QACxCI,WAAW,EAAC,sBAAsB;QAClCnB,KAAK,EAAEC,MAAM,CAAClB;MAAM;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACFrC,OAAA;QAAQ4C,OAAO,EAAEnC,WAAY;QAACe,KAAK,EAAEC,MAAM,CAACoB,MAAO;QAAAlB,QAAA,EAAC;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnC,EAAA,CAtDQD,OAAO;AAAA6C,EAAA,GAAP7C,OAAO;AAwDhB,MAAMwB,MAAM,GAAG;EACbC,SAAS,EAAE;IAAEqB,OAAO,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAQ,CAAC;EACnDpB,OAAO,EAAE;IACPqB,MAAM,EAAE,gBAAgB;IACxBF,OAAO,EAAE,MAAM;IACfG,MAAM,EAAE,OAAO;IACfC,SAAS,EAAE,QAAQ;IACnBC,YAAY,EAAE;EAChB,CAAC;EACDpB,IAAI,EAAE;IAAEqB,SAAS,EAAE,OAAO;IAAEC,MAAM,EAAE,KAAK;IAAEC,UAAU,EAAE,SAAS;IAAER,OAAO,EAAE,KAAK;IAAES,YAAY,EAAE;EAAM,CAAC;EACvGvB,GAAG,EAAE;IAAEoB,SAAS,EAAE,MAAM;IAAEC,MAAM,EAAE,KAAK;IAAEC,UAAU,EAAE,SAAS;IAAER,OAAO,EAAE,KAAK;IAAES,YAAY,EAAE;EAAM,CAAC;EACrGlB,SAAS,EAAE;IAAEmB,OAAO,EAAE;EAAO,CAAC;EAC9BlD,KAAK,EAAE;IAAEmD,IAAI,EAAE,CAAC;IAAEX,OAAO,EAAE;EAAO,CAAC;EACnCF,MAAM,EAAE;IAAEE,OAAO,EAAE;EAAY;AACjC,CAAC;AAED,eAAe9C,OAAO;AAAC,IAAA6C,EAAA;AAAAa,YAAA,CAAAb,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}