{"ast":null,"code":"var _jsxFileName = \"C:\\\\laravel-botman-chat\\\\src\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  const [showWelcomePopup, setShowWelcomePopup] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowWelcomePopup(false);\n    }, 5000);\n    return () => clearTimeout(timer);\n  }, []);\n  useEffect(() => {\n    if (!visible && messages.length > 0) {\n      const lastMessage = messages[messages.length - 1];\n      if (lastMessage.from === 'bot') {\n        setUnreadCount(prev => prev + 1);\n      }\n    }\n  }, [messages, visible]);\n  useEffect(() => {\n    if (visible && messages.length === 0) {\n      setTimeout(() => {\n        setMessages(prev => [...prev, {\n          from: 'bot',\n          text: 'üëã Hi there! I\\'m your virtual assistant. How can I help you today?',\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }]);\n        setUnreadCount(0);\n      }, 300);\n    }\n  }, [visible]);\n  useEffect(() => {\n    const debounceTimer = setTimeout(() => {\n      const fetchSuggestions = async () => {\n        if (userInput.trim().length < 2) {\n          setSuggestions([]);\n          return;\n        }\n        try {\n          const response = await axios.get(`http://localhost:8000/autocomplete?query=${userInput}`);\n          const questions = response.data.map(item => item.question || item);\n          setSuggestions(questions.slice(0, 5));\n        } catch (error) {\n          console.error('Autocomplete fetch failed', error);\n          setSuggestions([]);\n        }\n      };\n      fetchSuggestions();\n    }, 300);\n    return () => clearTimeout(debounceTimer);\n  }, [userInput]);\n  const sendMessage = async (text = userInput) => {\n    if (text.trim() === '') return;\n    const userMessage = {\n      from: 'user',\n      text,\n      timestamp: new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setSuggestions([]);\n    setUserInput('');\n    setIsTyping(true);\n    try {\n      const response = await axios.post('http://localhost:8000/botman', {\n        message: text\n      });\n      setTimeout(() => {\n        var _response$data$messag, _response$data$messag2;\n        const botReply = ((_response$data$messag = response.data.messages) === null || _response$data$messag === void 0 ? void 0 : (_response$data$messag2 = _response$data$messag[0]) === null || _response$data$messag2 === void 0 ? void 0 : _response$data$messag2.text) || \"ü§ñ Sorry, I didn't quite understand that. Could you rephrase or try asking differently?\";\n        setMessages(prev => [...prev, {\n          from: 'bot',\n          text: botReply,\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }]);\n        setIsTyping(false);\n      }, 1000 + Math.random() * 1000);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        from: 'bot',\n        text: \"‚ö†Ô∏è Our systems are currently unavailable. Please try again later or contact support@example.com\",\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      }]);\n      setIsTyping(false);\n    }\n  };\n  const handleSuggestionClick = suggestion => {\n    sendMessage(suggestion);\n  };\n  const clearChat = () => {\n    setMessages([]);\n    setUserInput('');\n  };\n  const toggleChat = () => {\n    setVisible(!visible);\n    if (!visible) setUnreadCount(0);\n  };\n  const toggleMinimize = () => {\n    setIsMinimized(!isMinimized);\n  };\n  const quickOptions = ['Reset Password', 'Check Order Status', 'Payment Options', 'Contact Support', 'Account Settings', 'FAQ'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-wrapper ${visible ? 'visible' : ''}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"wzNzlMSTjqAeObFXa1mTXZJVHf0=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","userInput","setUserInput","visible","setVisible","suggestions","setSuggestions","showWelcomePopup","setShowWelcomePopup","isTyping","setIsTyping","unreadCount","setUnreadCount","isMinimized","setIsMinimized","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","timer","setTimeout","clearTimeout","length","lastMessage","from","prev","text","timestamp","Date","toLocaleTimeString","hour","minute","debounceTimer","fetchSuggestions","trim","response","get","questions","data","map","item","question","slice","error","console","sendMessage","userMessage","post","message","_response$data$messag","_response$data$messag2","botReply","Math","random","handleSuggestionClick","suggestion","clearChat","toggleChat","toggleMinimize","quickOptions","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/laravel-botman-chat/src/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [visible, setVisible] = useState(false);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [showWelcomePopup, setShowWelcomePopup] = useState(true);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isMinimized, setIsMinimized] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setShowWelcomePopup(false);\r\n    }, 5000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!visible && messages.length > 0) {\r\n      const lastMessage = messages[messages.length - 1];\r\n      if (lastMessage.from === 'bot') {\r\n        setUnreadCount(prev => prev + 1);\r\n      }\r\n    }\r\n  }, [messages, visible]);\r\n\r\n  useEffect(() => {\r\n    if (visible && messages.length === 0) {\r\n      setTimeout(() => {\r\n        setMessages(prev => [...prev, {\r\n          from: 'bot',\r\n          text: 'üëã Hi there! I\\'m your virtual assistant. How can I help you today?',\r\n          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n        }]);\r\n        setUnreadCount(0);\r\n      }, 300);\r\n    }\r\n  }, [visible]);\r\n\r\n  useEffect(() => {\r\n    const debounceTimer = setTimeout(() => {\r\n      const fetchSuggestions = async () => {\r\n        if (userInput.trim().length < 2) {\r\n          setSuggestions([]);\r\n          return;\r\n        }\r\n\r\n        try {\r\n          const response = await axios.get(`http://localhost:8000/autocomplete?query=${userInput}`);\r\n          const questions = response.data.map(item => item.question || item);\r\n          setSuggestions(questions.slice(0, 5));\r\n        } catch (error) {\r\n          console.error('Autocomplete fetch failed', error);\r\n          setSuggestions([]);\r\n        }\r\n      };\r\n\r\n      fetchSuggestions();\r\n    }, 300);\r\n\r\n    return () => clearTimeout(debounceTimer);\r\n  }, [userInput]);\r\n\r\n  const sendMessage = async (text = userInput) => {\r\n    if (text.trim() === '') return;\r\n\r\n    const userMessage = {\r\n      from: 'user',\r\n      text,\r\n      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n    };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setSuggestions([]);\r\n    setUserInput('');\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:8000/botman', { message: text });\r\n\r\n      setTimeout(() => {\r\n        const botReply = response.data.messages?.[0]?.text || \"ü§ñ Sorry, I didn't quite understand that. Could you rephrase or try asking differently?\";\r\n        setMessages(prev => [...prev, {\r\n          from: 'bot',\r\n          text: botReply,\r\n          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n        }]);\r\n        setIsTyping(false);\r\n      }, 1000 + Math.random() * 1000);\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, {\r\n        from: 'bot',\r\n        text: \"‚ö†Ô∏è Our systems are currently unavailable. Please try again later or contact support@example.com\",\r\n        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n      }]);\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion) => {\r\n    sendMessage(suggestion);\r\n  };\r\n\r\n  const clearChat = () => {\r\n    setMessages([]);\r\n    setUserInput('');\r\n  };\r\n\r\n  const toggleChat = () => {\r\n    setVisible(!visible);\r\n    if (!visible) setUnreadCount(0);\r\n  };\r\n\r\n  const toggleMinimize = () => {\r\n    setIsMinimized(!isMinimized);\r\n  };\r\n\r\n  const quickOptions = [\r\n    'Reset Password',\r\n    'Check Order Status',\r\n    'Payment Options',\r\n    'Contact Support',\r\n    'Account Settings',\r\n    'FAQ'\r\n  ];\r\n\r\n  return (\r\n    <div className={`chatbot-wrapper ${visible ? 'visible' : ''}`}>\r\n      {/* Chat UI goes here including the message list, input, buttons, and animations */}\r\n      {/* Use the existing JSX structure and styling you had before */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}