{"ast":null,"code":"var _jsxFileName = \"C:\\\\laravel-botman-chat\\\\src\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n  // ‚úÖ Fetch suggestions from DB based on input\n  useEffect(() => {\n    const fetchSuggestions = async () => {\n      if (userInput.trim().length < 2) {\n        setSuggestions([]);\n        return;\n      }\n      try {\n        const res = await axios.get(`http://localhost:8000/autocomplete?query=${encodeURIComponent(userInput)}`);\n        setSuggestions(res.data.slice(0, 5)); // Top 5\n      } catch (err) {\n        console.error('Autocomplete fetch failed:', err);\n      }\n    };\n    fetchSuggestions();\n  }, [userInput]);\n\n  // ‚úÖ When user types\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n\n  // ‚úÖ When user clicks a suggestion\n  const handleSuggestionClick = text => {\n    setUserInput(text);\n    setSuggestions([]);\n  };\n\n  // ‚úÖ Send message\n  const sendMessage = async () => {\n    if (userInput.trim() === '') return;\n    const newMessage = {\n      from: 'user',\n      text: userInput,\n      timestamp: new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setUserInput('');\n    setSuggestions([]);\n    try {\n      var _response$data$messag, _response$data$messag2;\n      const response = await axios.post('http://localhost:8000/botman', {\n        message: newMessage.text\n      });\n      const botReply = ((_response$data$messag = response.data.messages) === null || _response$data$messag === void 0 ? void 0 : (_response$data$messag2 = _response$data$messag[0]) === null || _response$data$messag2 === void 0 ? void 0 : _response$data$messag2.text) || \"ü§ñ Sorry, I didn't get that.\";\n      setMessages(prev => [...prev, {\n        from: 'bot',\n        text: botReply,\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      }]);\n    } catch (err) {\n      setMessages(prev => [...prev, {\n        from: 'bot',\n        text: '‚ö†Ô∏è System unavailable.',\n        timestamp: new Date().toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.from}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: handleInputChange,\n        placeholder: \"Ask a question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestion-list\",\n        children: suggestions.map((s, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSuggestionClick(s),\n          children: s\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"AkmdzRmjtaiPMOzM8BgIN+hFfUs=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","suggestions","setSuggestions","messages","setMessages","fetchSuggestions","trim","length","res","get","encodeURIComponent","data","slice","err","console","error","handleInputChange","e","target","value","handleSuggestionClick","text","sendMessage","newMessage","from","timestamp","Date","toLocaleTimeString","hour","minute","prev","_response$data$messag","_response$data$messag2","response","post","message","botReply","className","children","map","msg","i","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","s","_c","$RefreshReg$"],"sources":["C:/laravel-botman-chat/src/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nfunction Chatbot() {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // ‚úÖ Fetch suggestions from DB based on input\r\n  useEffect(() => {\r\n    const fetchSuggestions = async () => {\r\n      if (userInput.trim().length < 2) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const res = await axios.get(`http://localhost:8000/autocomplete?query=${encodeURIComponent(userInput)}`);\r\n        setSuggestions(res.data.slice(0, 5)); // Top 5\r\n      } catch (err) {\r\n        console.error('Autocomplete fetch failed:', err);\r\n      }\r\n    };\r\n\r\n    fetchSuggestions();\r\n  }, [userInput]);\r\n\r\n  // ‚úÖ When user types\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n  };\r\n\r\n  // ‚úÖ When user clicks a suggestion\r\n  const handleSuggestionClick = (text) => {\r\n    setUserInput(text);\r\n    setSuggestions([]);\r\n  };\r\n\r\n  // ‚úÖ Send message\r\n  const sendMessage = async () => {\r\n    if (userInput.trim() === '') return;\r\n\r\n    const newMessage = {\r\n      from: 'user',\r\n      text: userInput,\r\n      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n    };\r\n    setMessages(prev => [...prev, newMessage]);\r\n    setUserInput('');\r\n    setSuggestions([]);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:8000/botman', { message: newMessage.text });\r\n      const botReply = response.data.messages?.[0]?.text || \"ü§ñ Sorry, I didn't get that.\";\r\n      setMessages(prev => [...prev, { from: 'bot', text: botReply, timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) }]);\r\n    } catch (err) {\r\n      setMessages(prev => [...prev, { from: 'bot', text: '‚ö†Ô∏è System unavailable.', timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((msg, i) => (\r\n          <div key={i} className={`message ${msg.from}`}>\r\n            <span>{msg.text}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat-input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Ask a question...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n\r\n        {suggestions.length > 0 && (\r\n          <ul className=\"suggestion-list\">\r\n            {suggestions.map((s, i) => (\r\n              <li key={i} onClick={() => handleSuggestionClick(s)}>\r\n                {s}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}